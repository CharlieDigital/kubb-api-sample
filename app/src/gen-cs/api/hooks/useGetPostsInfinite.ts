/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetPostsQueryResponse, GetPostsQueryParams } from '../types/GetPosts.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getPostsInfiniteQueryKey = (params: GetPostsQueryParams) => [{ url: '/posts' }, ...(params ? [params] : [])] as const

export type GetPostsInfiniteQueryKey = ReturnType<typeof getPostsInfiniteQueryKey>

/**
 * @description Gets a list of posts with Seth
 * {@link /posts}
 */
export async function getPostsInfinite(params: GetPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetPostsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/posts`,
    baseURL: 'http://localhost:3000',
    params,
    ...requestConfig,
  })
  return res.data
}

export function getPostsInfiniteQueryOptions(params: GetPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getPostsInfiniteQueryKey(params)
  return infiniteQueryOptions<GetPostsQueryResponse, ResponseErrorConfig<Error>, GetPostsQueryResponse, typeof queryKey, number>({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['page'] = pageParam as unknown as GetPostsQueryParams['page']
      }
      return getPostsInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextPage'],
    getPreviousPageParam: (firstPage) => firstPage['nextPage'],
  })
}

/**
 * @description Gets a list of posts with Seth
 * {@link /posts}
 */
export function useGetPostsInfinite<
  TData = InfiniteData<GetPostsQueryResponse>,
  TQueryData = GetPostsQueryResponse,
  TQueryKey extends QueryKey = GetPostsInfiniteQueryKey,
>(
  params: GetPostsQueryParams,
  options: {
    query?: Partial<InfiniteQueryObserverOptions<GetPostsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getPostsInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(getPostsInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}